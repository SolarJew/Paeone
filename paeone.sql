-- phpMyAdmin SQL Dump
-- version 4.4.7
-- http://www.phpmyadmin.net
--
-- Хост: localhost
-- Время создания: Май 07 2020 г., 13:13
-- Версия сервера: 5.5.47-MariaDB
-- Версия PHP: 5.5.13

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;

--
-- База данных: `paeone`
--

-- --------------------------------------------------------

--
-- Структура таблицы `pages`
--

CREATE TABLE IF NOT EXISTS `pages` (
  `id` int(10) NOT NULL,
  `idPage` int(10) NOT NULL,
  `category` int(10) NOT NULL,
  `language` varchar(2) NOT NULL,
  `view` varchar(100) NOT NULL DEFAULT '',
  `name` varchar(255) NOT NULL,
  `title` varchar(255) NOT NULL,
  `keywords` varchar(255) NOT NULL,
  `description` text NOT NULL,
  `text` text NOT NULL,
  `address` varchar(255) NOT NULL,
  `robotTxt` int(1) NOT NULL,
  `siteMap` int(1) NOT NULL,
  `creatDate` datetime NOT NULL,
  `status` int(1) NOT NULL
) ENGINE=InnoDB AUTO_INCREMENT=15 DEFAULT CHARSET=utf8;

--
-- Дамп данных таблицы `pages`
--

INSERT INTO `pages` (`id`, `idPage`, `category`, `language`, `view`, `name`, `title`, `keywords`, `description`, `text`, `address`, `robotTxt`, `siteMap`, `creatDate`, `status`) VALUES
(1, 1, 0, 'ru', '', 'Главная', 'Добро пожаловать', 'ключевые слова', 'описание', '<style>\ncode {\n	padding: .2em .4em;\n	margin: 0;\n	font-size: 85%;\n	background-color: rgba(27,31,35,.05);\n	border-radius: 3px;\n}\nblockquote {\n	padding: 0 1em;\n	color: #6a737d;\n	border-left: .25em solid #dfe2e5;\n}\n\nh3 {\n	font-size: 1.25em;\n	padding-bottom: .3em;\n	border-bottom: 1px solid #eaecef;\n}\n\nol {\n	padding-left: 2em;\n}\nul {\n	padding-left: 2em;\n}\nli {\n	box-sizing: border-box;\n}\n\npre {\n	padding: 16px;\n	overflow: auto;\n	font-size: 85%;\n	line-height: 1.45;\n	background-color: #f6f8fa;\n	border-radius: 3px;\n}\n</style>\n<div align="center">\n	<div style="width:90%; text-align:left;">\nВ данном проекте предпринята попытка реализовать возможность подключения или отключения <code>условного блока</code> без внесения изменений в ядро системы.<br>\n<br>\nДля увеличения функционала программного обеспечения достаточно создать независимый блок кода, объявить его в html шаблоне родительского блока (там, где Вам это требуется) в виде метки <code>[&lowast;include | имя_блока&lowast;]</code> и объявить его подключение в родительском <code>view/Имя_блока.php</code> объектом <code>$this->connection(имя блока)</code>. Корневым блоком для всех последующий подключений является <code>View/Content.php</code>.<br>\nСтандартным блоком обработки страниц является <code>View/Page.php</code>. Если Вам требуется заменить на одной или многих страницах стандратный обработчик на свой блок, то просто укажите его имя в ячейке <code>view</code>, таблицы <code>pages</code>, в БД.<br>\n<br>\n<blockquote> Подключение дочерних блоков должно производиться только после отработки всех элементов родительского блока.</blockquote>\n\n<h3>Блок состоит из трёх частей:</h3>\n<ol>\n	<li> View/Имя_блока.php</li>\n	<li> Design/имя_темы/Имя_блока.html</li>\n 	<li> Functions/Имя_блока.php</li>\n</ol>\n<h3>В данной структуре возможны варианты:</h3>\n<ul>\n	<li> Только <code>1 и 2</code></li>\n	<li> Только <code>3 и 2</code></li>\n	<li> Только <code>3</code></li>\n	<li> Полный <code>1, 2 и 3</code></li>\n</ul>\n<blockquote> Устанавливать метку <code>[&lowast;include | имя_блока&lowast;]</code> в родительском html нужно, только если существует <code>View/Имя_блока.php</code> </blockquote>\n\n<h3>View/Имя_блока.php:</h3>\n\nФайл в директории View. Отвечает за обработку и вывод шаблона при запросе к странице сайта вместе с другими блоками <code>в том случае, если он объявлен на запрашиваемой странице</code>. В момент исполнения в его <code>$this</code> вкладываются объекты ядра <code>настройки, доступные языки, get, post, адрес запроса, язык запроса, объекты запросов к БД</code>, разделённый на элементы шаблон блока <code>$this->template</code>. Так же становится доступной функция подключения дочерних блоков.\n<br>\n<blockquote> Для данной части блока наличие файла <code>Design/имя_темы/Имя_блока.html</code> Обязательно. </blockquote>\n\n<h3>Структура View/Имя_блока.php:</h3>\n\n<pre>\nclass Имя_блока extends Container\n{\n    // Обязательный элемент\n    function __construct(){\n        // Обязательный элемент\n        parent::__construct();\n        \n        // Обязательный элемент. Ответ необходимо вложить в $this->template в виде html строки.\n        $this->template = $this->view();\n        \n        // Не обязательный элемент. Подключение дочернего блока\n        $this->connection(''language'');\n        \n        // Последовательность принципиально важна! В начале всегда исполняется код самого блока, затем подключается дочерний блок.\n    }\n    \n    // Не обязательный элемент объявленный в __construct().\n    private function view()\n    {\n        $url = ''[&lowast;url | ADDRESS&lowast;]''.($this->request->language != $this->config->DEFAULT_LANGUAGE ? ''[&lowast;url | TYPE&lowast;]'' : ''/'');\n        $result = str_replace(''[&lowast;func | url&lowast;]'', $url, $this->template[''content'']);\n        \n        return $result;\n    }\n}\n</pre>\n\n<h3>Design/имя_темы/Имя_блока.html:</h3>\n\nФайл в директории Design/имя_темы/. Является шаблоном блока разделённым метками на элементы.\n\n<h3>Метки используемые в шаблоне:</h3>\n<ul>\n	<li><code>[&lowast;data | имя_метки&lowast;]</code> – используется для вывода данных из БД. Имя должно соответстовать ключу в таблице.</li>\n	<li><code>[&lowast;url | имя_метки&lowast;]</code> – используется для установки головной и/или конечной части адреса URL. Доступны <code>[&lowast;url | ADDRESS&lowast;] и [&lowast;url | TYPE&lowast;]</code></li>\n	<li><code>[&lowast;func | имя_метки&lowast;]</code> – используется текущим блоком для собственных нужд. Имя может быть любым.</li>\n	<li><code>[&lowast;lang | имя_метки&lowast;]</code> – используется для вывода данных из языкового пакета. Имя должно соответствовать ключу в языковом файле.</li>\n	<li><code>[&lowast;split | имя_метки&lowast;] html код [&lowast;/split&lowast;]</code> – используется для разграничения шаблона на элементы. Имя может быть любым, но уникальным среди других меток <code>split</code>. На основе этих меток в объект <code>$this->template</code> вкладывается массив элементов, где ключ, это имя метки, значение html код.</li>\n	<li><code>[&lowast;include | имя_метки&lowast;]</code> – используется для вывода html кода дочернего блока. Имя должно соответствовать названию блока.</li>\n</ul>\n<blockquote> Данный файл является обязательным для <code>View/Имя_блока.php</code> и не является обязательным для <code>Functions/Имя_блока.php</code>. </blockquote>\n\n<h3>Пример Design/имя_темы/Имя_блока.html:</h3>\n\n<pre>\n[&lowast;split | language&lowast;]\n&lt;div class="boxInput"&gt;\n    &lt;div class="inputGroupAddon" id="langue"&gt;\n        &lt;i class="flag [&lowast;func | alpha_two&lowast;]"&gt;&lt;/i&gt;\n    &lt;/div&gt;\n    &lt;div class="selectPointList langueList" id="langueList"&gt;\n        [&lowast;func | list_language&lowast;]\n    &lt;/div&gt;\n&lt;/div&gt;\n[&lowast;/split&lowast;]\n\n[&lowast;split | language_elem&lowast;]\n&lt;a href="[&lowast;func | url&lowast;]"&gt;\n	&lt;div class="pointStyleList optLangList"&gt;\n		&lt;i class="flagInList [&lowast;func | alpha_two&lowast;]"&gt;&lt;/i&gt;[&lowast;func | name_lang&lowast;]\n	&lt;/div&gt;\n&lt;/a&gt;\n[&lowast;/split&lowast;]\n</pre>\n\n<h3>Functions/Имя_блока.php:</h3>\n\nФайл в директории Functions. Отвечает за обработку прямых <code>GET и POST</code> запросов <code>http://имя_сайта.ru/имя_блока.func</code>.\nВ момент исполнения в его <code>$this</code> вкладываются объекты ядра <code>настройки, доступные языки, get, post, адрес запроса, язык запроса, объекты запросов к БД</code>, разделённый на элементы шаблон блока <code>$this->template</code> (если шаблон существует).\n\n<h3>Структура Functions/Имя_блока.php:</h3>\n\n<pre>\nclass Имя_блока extends Container\n{\n    // Обязательный элемент.\n    function __construct(){\n        //self::$permitGet = true; // Разрешает прямой GET запрос (по умолчанию, только POST)\n        //self::$permitGlobal = true; // Разрешает запрос с других ресурсов (по умолчанию, только локальный запрос. Требует token)\n        //self::$permitHtml = true; // Осуществляет ответ с заголовком text/html (по умолчанию application/json)\n        \n        // Обязательный элемент.\n        parent::__construct();\n        \n        // Не обязательный элемент.\n        $answer = $this->checkUser();\n        \n        // Не обязательный элемент. Ответ необходимо вложить в $this->template в виде html строки.\n        $this->template = $this->view($answer);\n    }\n    \n    private function checkUser()\n    {\n        $result = array();\n        if(isset($this->request->post[''login'']) && isset($this->request->post[''password''])){\n            $answer = $this->db->select("idUser, passUser","users","loginUser = ''".$this->request->post[''login'']."'' and statusUser = ''1''");\n            if(isset($answer[0][''idUser''])){\n                if(md5($this->request->post[''password'']) == $answer[0][''passUser'']){\n                    $_SESSION[''user''] = $answer[0][''idUser''];\n                }else{\n                    $result[''error''] = ''[&lowast;lang | error_login_pass&lowast;]'';\n                }\n            }else{\n                $result[''error''] = ''[&lowast;lang | error_login_pass&lowast;]'';\n            }\n        }else{\n            $result[''error''] = ''[&lowast;lang | error_params&lowast;]'';\n        }\n        \n        return $result;\n    }\n    \n    private function view($answer)\n    {\n        if(isset($answer[''error''])){\n            $str = str_replace(''[&lowast;func | error_text&lowast;]'', $answer[''error''], $this->template[''error_mess'']);\n            $result = str_replace(''[&lowast;func | message&lowast;]'', $str, $this->template[''error_answer'']);\n        }else{\n            $result = $this->template[''posit_answer''];\n        }\n        \n        return $result;\n    }\n}\n</pre>\n\n<h3>Структура Базы Данных:</h3>\n<ul>\n	<li>pages</li>\n	<li>users <code>В качестве примера работы блока</code></li>\n</ul>\n<h3>Таблица pages:</h3>\n<ul>\n	<li>id: Идентификатор записи <code>Уникален для каждой записи</code></li>\n	<li>idPage: Идентификатор страницы <code>Общий для страниц с разным языком, уникален относительно других страниц</code></li>\n	<li>category: Идентификатор категории <code>Общий для страниц с разным языком. Содержит idPage родительской страницы (по умолчанию 0, корневая страница)</code></li>\n	<li>language: Идентификатор языка страницы <code>Уникален для страниц с разным языком, общий относительно других страниц. Использует записи alpha2</code></li>\n	<li>view: Идентификатор блока обработчика <code>Содержит имя блока или пуст</code></li>\n	<li>name: Имя страницы</li>\n	<li>title: Заголовок страницы</li>\n	<li>keywords: Ключевые слова страницы</li>\n	<li>description: Краткое описание страницы</li>\n	<li>text: Контент страницы</li>\n	<li>address: Адрес страницы <code>может являться директорией в адресе дочерней страницы</code></li>\n	<li>robotTxt: Идентификатор отключения страницы в генерируемом файле robot.txt <code>За генерацию файла отвечает соответствующий блок</code></li>\n	<li>siteMap: Идентификатор включения страницы в генерируемом файле sitemap.xml <code>За генерацию файла отвечает соответствующий блок</code></li>\n	<li>creatDate: Дата создания страницы</li>\n	<li>status: Идентификатор видимости страницы</li>\n</ul>\n<blockquote> Ячейки требующиеся ядру: <code>id, idPage, category, language, view, address, status</code>. Остальные ячейки можно изменять, добавлять, удалять.</blockquote>\n\n<h3>Таблица users:</h3>\n<ul>\n	<li>idUser: Идентификатор записи <code>Уникален для каждой записи</code></li>\n	<li>loginUser: Идентификатор пользователя <code>Уникален для каждого пользователя</code></li>\n	<li>passUser: Пароль пользователя</li>\n	<li>surnameUser: Фамилия пользователя</li>\n	<li>nameUser: Имя пользователя</li>\n	<li>dateBirthUser: Дата рождения пользователя</li>\n	<li>genderUser: Пол пользователя</li>\n	<li>imgUser: Ссылка на изображение загруженное пользователем</li>\n	<li>phoneUser: Телефон пользователя</li>\n	<li>emailUser: Email пользователя <code>Уникален для каждого пользователя</code></li>\n	<li>creatDateUser: Дата регистрации пользователя</li>\n	<li>statusUser: Идентификатор активной/не активной записи</li>\n</ul>\n	</div>\n</div>', 'index', 1, 1, '2020-04-17 00:00:00', 1),
(2, 1, 0, 'en', '', 'Home', 'Welcome', 'keywords', 'description', '<style>\ncode {\n	padding: .2em .4em;\n	margin: 0;\n	font-size: 85%;\n	background-color: rgba(27,31,35,.05);\n	border-radius: 3px;\n}\nblockquote {\n	padding: 0 1em;\n	color: #6a737d;\n	border-left: .25em solid #dfe2e5;\n}\n\nh3 {\n	font-size: 1.25em;\n	padding-bottom: .3em;\n	border-bottom: 1px solid #eaecef;\n}\n\nol {\n	padding-left: 2em;\n}\nul {\n	padding-left: 2em;\n}\nli {\n	box-sizing: border-box;\n}\n\npre {\n	padding: 16px;\n	overflow: auto;\n	font-size: 85%;\n	line-height: 1.45;\n	background-color: #f6f8fa;\n	border-radius: 3px;\n}\n</style>\n<div align="center">\n<div style="width:90%; text-align:left;">\nThis project attempts to implement the ability to enable or disable the <code>conditional block</code> without making changes to the system core.<br>\n<br>\nTo increase the functionality of the software, you just need to create an independent block of code and declare it in the html template of the parent block (where you need it) as a <code>label[&lowast;include | block_name&lowast;]</code> and declare its connection in the parent <code>view/Block_name.php</code> object <code>$this->connection(block name)</code>. The root block for all subsequent connections is <code>View/Content.php</code>.<br>\nThe standard page processing block is <code>View/Page.php</code>. If you need to replace a standard handler on one or many pages with your own block, just enter its name in the cell <code>view</code>, tables <code>pages</code>, in the DB.<br>\n<br>\n<blockquote> Child blocks must be connected only after all elements of the parent block have been processed.</blockquote>\n\n<h3>the Block consists of three parts:</h3>\n<ol>\n    <li> View/Imalloc.php</li>\n    <li> Design/system_name/Имя_блока.html</li>\n    <li> Functions/Block name.php</li>\n</ol>\n<h3>there are possible options In this structure:</h3>\n<ul>\n    <li> Only <code>1 and 2</code></li>\n    <li> Only <code>3 and 2</code></li>\n    <li> Only <code>3</code></li>\n    <li> Full <code>1, 2 and 3</code></li>\n</ul>\n<blockquote> You only need to set the <code>[&lowast;include | block_name&lowast;]</code> tag in the parent html if there is a <code>View/Block_name.php</code> </blockquote>\n\n<h3>View/Имя_блока.php:</h3>\n\nFile in the View directory. Responsible for processing and displaying the template when requesting a site page along with other <code>blocks, if it is declared on the requested page</code>. At the time of execution, its <code>$this</code> kernel objects are embedded <code>settings, available languages, get, post, query address, query language, DB query objects</code>, and the <code>$this->template</code>block template divided into elements. The function for connecting child blocks also becomes available.\n<br>\n<blockquote> For this part of the block, the <code>Design/system_name file is available/Имя_блока.html</code> Necessarily. </blockquote>\n\n<h3>Structure View/Имя_блока.php:</h3>\n\n<pre>\nclass_block Name extends Container\n{\n    // Required element\n    function __construct(){\n        // Required element\n        parent::__construct();\n        \n        // Mandatory element. The response must be enclosed in $this - >template as an html string.\n        $this->template = $this->view();\n        \n        // Not a required element. Connecting a child block\n        $this->connection(''language'');\n\n        // Consistency is essential! At the beginning, the code of the block itself is always executed, then the child block is connected.\n    }\n    \n    // Optional element declared in __construct ().\n    private function view()\n    {\n        $url = ''[&lowast;url | ADDRESS&lowast;]''.($this->request->language != $this->config->DEFAULT_LANGUAGE ? ''[&lowast;url | TYPE&lowast;]'' : ''/'');\n        $result = str_replace(''[&lowast;func | url&lowast;]'', $url, $this->template[''content'']);\n        \n        return $result;\n    }\n}\n</pre>\n\n<h3>Design/system_name/Имя_блока.html:</h3>\n\nFile in the Design/system_name / directory. Is the pattern block separated labels for the items.\n\n<h3>Placemarks used in the template:</h3>\n<ul>\n    <li><code>[&lowast;data | tagName&lowast;]</code> - used to output data from the database. The name must match the key in the table.</li>\n    <li><code>[&lowast;url | tagName&lowast;]</code> - used for setting the head and/or end part of the URL. Available <code>[&lowast;url | ADDRESS&lowast;] and [&lowast;url | TYPE&lowast;]</code></li>\n    <li><code>[&lowast;func | tagName&lowast;]</code> - used by the current block for its own needs. The name can be anything.</li>\n    <li><code>[&lowast;lang | tagName&lowast;]</code> - used to output data from the language package. The name must match the key in the language file.</li>\n    <li><code>[&lowast;split | placemark_name&lowast;] html code [&lowast;/split&lowast;]</code> - used to differentiate the template into elements. The name can be any, but it is unique among other <code>split</code>tags. Based on these labels, the <code>$this->template</code> object is nested with an array of elements, where the key is the label name and the html code value.</li>\n    <li><code>[&lowast;include | tag_name&lowast;]</code> - used for displaying the html code of the child block. The name must match the block name.</li>\n</ul>\n<blockquote> This file is required for <code>View/Block_name.php</code> and not required for <code>Functions/Block name.php</code>. </blockquote>\n\n<h3>Example of Design/system_name/Имя_блока.html:</h3>\n\n<pre>\n[&lowast;split | language&lowast;]\n&lt;div class="boxInput"&gt;\n    &lt;div class="inputGroupAddon" id="langue"&gt;\n        &lt;i class="flag [&lowast;func | alpha_two&lowast;]"&gt;&lt;/i&gt;\n    &lt;/div&gt;\n    &lt;div class="selectPointList langueList" id="langueList"&gt;\n        [&lowast;func | list_language&lowast;]\n    &lt;/div&gt;\n&lt;/div&gt;\n[&lowast;/split&lowast;]\n\n[&lowast;split | language_elem&lowast;]\n&lt;a href="[&lowast;func | url&lowast;]"&gt;\n    &lt;div class="pointStyleList optLangList"&gt;\n        &lt;i class="flagInList [&lowast;func | alpha_two&lowast;]"&gt;&lt;/i&gt;[&lowast;func | name_lang&lowast;]\n    &lt;/div&gt;\n&lt;/a&gt;\n[&lowast;/split&lowast;]\n</pre>\n\n<h3>Functions/Imaplogin:</h3>\n\nFile in the Functions directory. Responsible for processing direct <code>GET and POST</code> requests <code>http://имя_сайта.ru/имя_блока.func</code>.\nAt the time of execution, its <code>$this</code> kernel objects are embedded <code>settings, available languages, get, post, query address, query language, DB query objects</code>, and the <code>$this->template</code> block template (if the template exists).\n\n<h3>functions Structure/Imaplogin:</h3>\n\n<pre>\nclass_block Name extends Container\n{\n    // Required element.\n    function __construct(){\n        //self::$permitGet = true; // Allows direct GET request (by default, only POST)\n        // self::$permitGlobal = true; // Allows a request from other resources (by default, only a local request. Requires a token)\n        //self::$permitHtml = true; // Performs the response with the text/html header (by default, application/json)\n        \n        // Mandatory element.\n        parent::__construct();\n        \n        // Not a required element.\n        $answer = $this->checkUser();\n        \n        // Not a required element. The response must be enclosed in $this - >template as an html string.\n        $this->template = $this->view($answer);\n    }\n    \n    private function checkUser()\n    {\n        $result = array();\n        if(isset($this->request->post[''login'']) && isset($this->request->post[''password''])){\n            $answer = $this->db->select("idUser, passUser","users","loginUser = ''".$this->request->post[''login'']."'' and statusUser = ''1''");\n            if(isset($answer[0][''idUser''])){\n                if(md5($this->request->post[''password'']) == $answer[0][''passUser'']){\n                    $_SESSION[''user''] = $answer[0][''idUser''];\n                }else{\n                    $result[''error''] = ''[&lowast;lang | error_login_pass&lowast;]'';\n                }\n            }else{\n                $result[''error''] = ''[&lowast;lang | error_login_pass&lowast;]'';\n            }\n        }else{\n            $result[''error''] = ''[&lowast;lang | error_params&lowast;]'';\n        }\n        \n        return $result;\n    }\n    \n    private function view($answer)\n    {\n        if(isset($answer[''error''])){\n            $str = str_replace(''[&lowast;func | error_text&lowast;]'', $answer[''error''], $this->template[''error_mess'']);\n            $result = str_replace(''[&lowast;func | message&lowast;]'', $str, $this->template[''error_answer'']);\n        }else{\n            $result = $this->template[''posit_answer''];\n        }\n        \n        return $result;\n    }\n}\n</pre>\n\n<h3>Database Structure:</h3>\n<ul>\n    <li>pages</li>\n    <li>users <code>As an example of how the block works</code></li>\n</ul>\n<h3>pages table:</h3>\n<ul>\n    <li>id: the Identifier of the entry <code>Unique for each entry</code></li>\n    <li>idPage: page ID <code>Common for pages with different languages, unique relative to other pages</code></li>\n    <li>category: Category ID <code>Shared for pages with different languages. Contains the idPage of the parent page (default 0, root page)</code></li>\n    <li>language: page language ID <code>It is unique for pages with different languages, and it is common relative to other pages. Uses alpha2 entries</code></li>\n    <li>view: ID of the handler block <code>Contains the block name or is empty</code></li>\n    <li>name: page Name</li>\n    <li>title: page Title</li>\n    <li>keywords: Page keywords</li>\n    <li>description: Short description of the page</li>\n    <li>text: page Content</li>\n    <li>address: The <code>page address can be a directory in the address of a child page</code></li>\n    <li>robotTxt: ID of disabling the page in the generated file robot.txt <code>The corresponding block is responsible for generating the file</code></li>\n    <li>siteMap: ID of page inclusion in the generated file sitemap.xml <code>The corresponding block is responsible for generating the file</code></li>\n    <li>creatDate: date the page was created</li>\n    <li>status: The ID of the visibility of the page</li>\n</ul>\n<blockquote> Cells required by the kernel: <code>id, idPage, category, language, view, address, status</code>. Other cells can be changed, added, or deleted.</blockquote>\n\n<h3>users table:</h3>\n<ul>\n    <li>idUser: record ID <code>Unique for each entry</code></li>\n    <li>loginUser: user ID <code>Unique for each user</code></li>\n    <li>passUser: user Password</li>\n    <li>surnameUser: user''s last Name</li>\n    <li>nameUser: user Name</li>\n    <li>dateBirthUser: user''s date of birth</li>\n    <li>genderUser: user''s Gender</li>\n    <li>imgUser: Link to an image uploaded by the user</li>\n    <li>phoneUser: the user''s Phone number</li>\n    <li>emailUser: user''s Email</li>\n    <li>creatDateUser: user registration date</li>\n    <li>statusUser: ID of the active / inactive record</li>\n</ul>\n</div>\n</div>', 'index', 1, 1, '2020-04-17 00:00:00', 1),
(3, 3, 0, 'ru', 'authorization', 'Авторизация', 'Авторизация', 'ключевые слова', 'описание', 'Контент страницы', 'authorization', 0, 0, '2020-04-17 00:00:00', 0),
(4, 3, 0, 'en', 'authorization', 'Authorization', 'Authorization', 'keywords', 'description', 'The content of the page', 'authorization', 0, 0, '2020-04-17 00:00:00', 0),
(5, 5, 0, 'ru', 'registration', 'Регистрация', 'Регистрация', 'ключевые слова', 'описание', 'Контент страницы', 'registration', 0, 0, '2020-04-17 00:00:00', 1),
(6, 5, 0, 'en', 'registration', 'Registration', 'Registration', 'keywords', 'description', 'The content of the page', 'registration', 0, 0, '2020-04-17 00:00:00', 1),
(7, 7, 0, 'ru', 'password_recovery', 'Восстановление пароля', 'Восстановление пароля', 'ключевые слова', 'описание', 'Контент страницы', 'password_recovery', 0, 0, '2020-04-17 00:00:00', 1),
(8, 7, 0, 'en', 'password_recovery', 'Password recovery', 'Password recovery', 'keywords', 'description', 'The content of the page', 'password_recovery', 0, 0, '2020-04-17 00:00:00', 1),
(9, 9, 0, 'ru', 'personal_account', 'Личный кабинет', 'Личный кабинет', 'ключевые слова', 'описание', 'Контент страницы', 'personal_account', 0, 0, '2020-04-17 00:00:00', 1),
(10, 9, 0, 'en', 'personal_account', 'Personal account', 'Personal account', 'keywords', 'description', 'The content of the page', 'personal_account', 0, 0, '2020-04-17 00:00:00', 1),
(11, 11, 0, 'ru', '', 'Страница 404', 'Страница не найдена', 'ключевые слова', 'описание', 'К сожалению, страница которую вы ищете, не найдена.<br>Вернуться на <a href="[*url | ADDRESS*]/">главную</a>.', '404', 0, 0, '2020-04-17 00:00:00', 1),
(12, 11, 0, 'en', '', 'Page 404', 'Page not found', 'keywords', 'description', 'Unfortunately, the page you are looking for was not found.<br>Go back to <a href="[*url | ADDRESS*]/">home page</a>.', '404', 0, 0, '2020-04-17 00:00:00', 1);

-- --------------------------------------------------------

--
-- Структура таблицы `users`
--

CREATE TABLE IF NOT EXISTS `users` (
  `idUser` int(10) NOT NULL,
  `loginUser` varchar(100) NOT NULL,
  `passUser` varchar(100) NOT NULL,
  `surnameUser` varchar(100) NOT NULL,
  `nameUser` varchar(100) NOT NULL,
  `dateBirthUser` date NOT NULL,
  `genderUser` varchar(1) NOT NULL,
  `imgUser` varchar(255) NOT NULL,
  `phoneUser` varchar(11) NOT NULL,
  `emailUser` varchar(255) NOT NULL,
  `creatDateUser` datetime NOT NULL,
  `statusUser` int(1) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Индексы сохранённых таблиц
--

--
-- Индексы таблицы `pages`
--
ALTER TABLE `pages`
  ADD PRIMARY KEY (`id`),
  ADD KEY `id` (`id`),
  ADD KEY `idPage` (`idPage`),
  ADD KEY `category` (`category`),
  ADD KEY `address` (`address`),
  ADD KEY `creatDate` (`creatDate`);

--
-- Индексы таблицы `users`
--
ALTER TABLE `users`
  ADD PRIMARY KEY (`idUser`);

--
-- AUTO_INCREMENT для сохранённых таблиц
--

--
-- AUTO_INCREMENT для таблицы `pages`
--
ALTER TABLE `pages`
  MODIFY `id` int(10) NOT NULL AUTO_INCREMENT,AUTO_INCREMENT=15;
--
-- AUTO_INCREMENT для таблицы `users`
--
ALTER TABLE `users`
  MODIFY `idUser` int(10) NOT NULL AUTO_INCREMENT;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
